{
	"info": {
		"_postman_id": "534f22e8-d789-414b-b571-50179fbaad47",
		"name": "Postman_HW_2_Merzantov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20911306"
	},
	"item": [
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject ();\r",
							"\r",
							"//  5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name = Mike\", function () {\r",
							"    pm.expect(reqData.name).to.eql(\"Mike\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"age = 26 \", function () {\r",
							"    pm.expect(reqData.age).to.eql('26');\r",
							"    });\r",
							"\r",
							"//  7. Вывести в консоль параметр salary из request.\r",
							"  let salary_req = reqData;\r",
							"     console.log(\"Salary_info_request ====> \" , salary_req.salary )\r",
							"\r",
							"\r",
							"// // 8. Вывести в консоль параметр salary из response.\r",
							"let resp = jsonData;\r",
							"console.log('Salary_info_response ====>' , resp.salary )\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"let resp_zero_element = jsonData.salary[0];\r",
							"console.log('Salary_zero_element ====>' , resp_zero_element)\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"let resp_first_element = +jsonData.salary[1];\r",
							"console.log('resp_first_element ====>' , resp_first_element)\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let resp_second_element = +jsonData.salary[2];\r",
							"console.log('resp_second_element ====>' , resp_second_element)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_zero = 5000 \", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(5000);\r",
							"    });\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"       pm.test(\"salary_first = 10000 \", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql('10000');\r",
							"    }); \r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"  pm.test(\"salary_second = '15000' \", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(\"15000\");\r",
							"    });\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// Первый вариант\r",
							"// for(let i=0; i<jsonData.salary.length; i++){\r",
							"//     console.log(jsonData.salary[i])\r",
							"//     }\r",
							"\r",
							"// Второй Вариант\r",
							" for(let key in jsonData.salary){\r",
							"    console.log(`Ключ ${key} , Значение ${jsonData.salary[key]}`)\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Проверка на 200 статус код\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var req = request.data\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"const object = jsonData;\r",
							"console.log(object.hasOwnProperty('start_qa_salary'));\r",
							"console.log(`Зарплата на старте , ${jsonData.start_qa_salary} `)\r",
							"\r",
							"// // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"console.log(object.hasOwnProperty('qa_salary_after_6_months'));\r",
							"console.log(`Зарплата через 6 месяцев , ${jsonData.qa_salary_after_6_months} `) \r",
							"\r",
							" // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"console.log(object.hasOwnProperty('qa_salary_after_12_months'));\r",
							"console.log(`Зарплата через 12 месяцев , ${jsonData.qa_salary_after_12_months} `)\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"console.log(object.hasOwnProperty(['qa_salary_after_1.5_year']));\r",
							"\r",
							"console.log(`Зарплата через 1.5 года   ,  ${['jsonData.qa_salary_after_1.5_year']}`)\r",
							"\r",
							"//  12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"console.log(object.hasOwnProperty('qa_salary_after_3\\.5_years'));\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"console.log(object.hasOwnProperty('person'))\r",
							"\r",
							"for(let key in jsonData.person){\r",
							"    console.log(`Ключ ${key} , Значение ${jsonData.person[key]}`)\r",
							"}\r",
							"\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Зарплата на старте карьеры \", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(5000);\r",
							"    });\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Зарплата спустя 6 месяцев \", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(5000 * 2);\r",
							"    });\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Зарплата спустя 12 месяцев \", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(5000 * 2.7);\r",
							"    });\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Зарплата спустя 1,5 года \", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(5000 * 3.3);\r",
							"    });\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Зарплата спустя 3,5 года \", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(5000 * 3.8);\r",
							"    });\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверка первого параметра Person \", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(5000);\r",
							"    });\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Проверка праметра u_age \", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(26);\r",
							"    });\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							" pm.test(\"Проверка параметра salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(5000*4.2);\r",
							"    });   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let key2 in jsonData.person){\r",
							"\r",
							"    console.log(`Имема ключей ${key2} . Значение ключей ${jsonData.person[key2]}`);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// for(let i=0; i<jsonData.person.length; i++){\r",
							"//     console.log(jsonData.person[i])\r",
							"//     }\r",
							"\r",
							"// Второй Вариант\r",
							"//  for(let key in jsonData.person){\r",
							"//     console.log(`Ключ ${key} , Значение ${jsonData.person[key]}`)\r",
							"// }\r",
							"\r",
							"// for(let key in obj.person){\r",
							"//     console.log(`Ключ ${key} , Значение ${obj.person[key]} `)\r",
							"\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//  pm.test(\"Начальная зарплата тестировщика \", function () {\r",
							"//     pm.expect(jsonData.start_qa_salary).to.eql(\"15000\");\r",
							"//     });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"let name_test = jsonData.name\r",
							"pm.test(\"Name_check\", function () {\r",
							"    pm.expect(name_test).to.eql(\"Mike\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"let age_test = +jsonData.age\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(age_test).to.eql(33);\r",
							"});\r",
							"\r",
							"// 6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"let salary_test = +jsonData.salary\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(salary_test).to.eql(5000);\r",
							"});\r",
							"\r",
							"\r",
							"//\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let name_test_1_auth = jsonData.name\r",
							"pm.test(\"Check_name_test_1_auth\", function () {\r",
							"    pm.expect(name_test_1_auth).to.eql(name_test_1_auth);\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let age_test_1_auth = +jsonData.age\r",
							"pm.test(\"Check_age_test_1_auth\", function () {\r",
							"    pm.expect(age_test_1_auth).to.eql(age_test_1_auth);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let salary_test_1_auth = +jsonData.salary\r",
							"pm.test(\"Check_salary_test_1_auth\", function () {\r",
							"    pm.expect(salary_test_1_auth).to.eql(salary_test_1_auth);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family_test = jsonData.family.children ;\r",
							"pm.test(\"family_check\", function () {\r",
							"    pm.expect(family_test).to.eql([ [ 'Alex', 24 ], [ 'Kate', 12 ] ] );\r",
							"});\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let u_salary_1_5_year_test = jsonData.u_salary_1_5_year;\r",
							"pm.test(\"check_u_salary_1_5_year_test\", function () {\r",
							"    pm.expect(u_salary_1_5_year_test).to.eql(u_salary_1_5_year_test);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mike",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let test_name = jsonData.name\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(test_name).to.eql(test_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let test_age = +jsonData.age\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(test_age).to.eql(test_age);\r",
							"});\r",
							"\r",
							"// . Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let test_salary = jsonData.salary\r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(test_salary).to.eql(test_salary);\r",
							"\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family_test = jsonData.family.children ;\r",
							"pm.test(\"family_check\", function () {\r",
							"    pm.expect(family_test).to.eql([ [ 'Alex', 24 ], [ 'Kate', 12 ] ] );\r",
							"});\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"let dog_test_name = jsonData.family.pets.dog;\r",
							"pm.test(\"check_dogs_name\", function () {\r",
							"    pm.expect(dog_test_name).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"let dog_test_age = jsonData.family.pets.dog;\r",
							"pm.test(\"check_dogs_age\", function () {\r",
							"    pm.expect(dog_test_age).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"let dog_test_name_Luky = jsonData.family.pets.dog.name;\r",
							"pm.test(\"check_dogs_name_luky\", function () {\r",
							"    pm.expect(dog_test_name_Luky).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"let dog_test_age_4 = jsonData.family.pets.dog.age;\r",
							"pm.test(\"check_dogs_age_4\", function () {\r",
							"    pm.expect(dog_test_age_4).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mike",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "26",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Mike&age=26&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mike"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}